// run code generator with `npm run generate`
import { writeFile } from 'fs/promises';
import opcodes from "./opcodes.json" assert {type: "json"}

const formatOperand = (operand) => {
    // replace "(a16)"" with "vala16"
    if (operand[0] === "(") {
        operand = `val${operand.slice(1, -1)}`
    }
    // replace "HL+" with "HLinc"
    operand = operand.replace("-", "dec")
    operand = operand.replace("+", "inc")
    return operand
}

const formatOpcodeEnum = (opc) => {
    let row = ""
    if (opc.operand1 && opc.operand2) {
        row += `${opc.mnemonic}_${formatOperand(opc.operand1)}_${formatOperand(opc.operand2)}`
    } else if (opc.operand1) {
        row += `${opc.mnemonic}_${formatOperand(opc.operand1)}`
    } else {
        row += `${opc.mnemonic}`
    }
    row += ` = ${opc.addr}` 
    return row
}

let enums = ""
Object.values(opcodes.unprefixed).forEach( opc => {
    enums += `  ${formatOpcodeEnum(opc)},
    `
})
enums += `

    // CB Prefixed
`
Object.values(opcodes.cbprefixed).forEach( opc => {
    enums += `  ${formatOpcodeEnum(opc)},
    `
})
const content = `// generated by npm run generate at ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()} 
export enum Opcode {
    ${enums}
}
`
try {
    await writeFile("./gameboy-emu/opcodes/opcodes.ts", content)
    console.log("wrote opcodes.ts")
} catch (err) {
    console.error(err)
}
